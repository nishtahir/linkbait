apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.bmuschko.docker-java-application'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile

group = "com.nishtahir.linkbait"
version = getVersion()
description = '''Application server for Linkbait'''

mainClassName = "com.nishtahir.linkbait.Application"

defaultTasks 'run'

kapt {
    generateStubs = true
}

dokka {
    moduleName = 'data'
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    processConfigurations = ['compile']
    linkMapping {
        dir = "src/main/kotlin"
        url = "https://gitlab.com/nishtahir/linkbait/tree/master/linkbait-server/src/main/kotlin"
        suffix = "#L"
    }
    sourceDirs += files('src/main/kotlin')
    sourceDirs += files('src/main/java')
}

sourceSets.main.java.srcDir file("$buildDir/generated/source/kapt/")

idea {
    module {
        generatedSourceDirs += file("$buildDir/generated/source/kapt/")
    }
}

repositories {
    mavenCentral()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
}

task copyDockerArchiveResources(type: Copy) {
    group "docker"
    dependsOn distTar
    from { distTar.archivePath }
    into { createDockerfile.destFile.parentFile }
}

task createDockerfile(type: Dockerfile) {
    group "docker"
    dependsOn copyDockerArchiveResources
    destFile = project.file("$project.buildDir/docker/Dockerfile")
    from 'nishtahir/openjfx:8-jre'
    maintainer 'Nish Tahir <nishtahir@outlook.com>'
    addFile({ distTar.archivePath.name }, { '/' })
    entryPoint { getEntryPoint() }
    exposePort 8080
}

def getEntryPoint() {
    String installDir = distTar.archiveName - ".${distTar.extension}"
    "/$installDir/bin/$project.applicationName".toString()
}

def getVersion() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    String tag = stdout.toString().trim()
    def matcher = tag =~ /^(\d+)\.(\d+)-(\d+)-g([a-zA-z0-9]+)$/
    if (matcher.matches()) {
        def major = matcher.group(1)
        def minor = matcher.group(2)
        def patch = matcher.group(3)
        def preRelease = matcher.group(4)
        return "${major}.${minor}.${patch}-${preRelease}"
    } else {
        //Probably the worst hack in the world... but it's 1 am...
        return "${tag}.0"
    }
}

task printVersion() {
    println version
}

task cacheVersion() {
    def file = file(".version")
    file.delete()
    file.write(version + "\n", "UTF-8")
}

dependencies {
    compile project(':linkbait-core')
    compile "org.springframework.boot:spring-boot-starter-data-rest:$spring_version"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$spring_version"
    compile "com.h2database:h2:1.4.191"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testCompile "org.springframework.boot:spring-boot-starter-test:$spring_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "org.jetbrains.spek:spek:$spek_version"
}
